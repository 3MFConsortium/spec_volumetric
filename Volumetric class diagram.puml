@startuml name
title 3MF Volumetric & Implicit

package Image3D
{
    Class Image3D
    {
        id : resourceID
        name : string
    }
    
    Class ImageStack extends Image3D
    {
        rowcount : int
        colcount : int
        sheetcount : int
    }

    Class ImageSheet
    {
        path : string (PNG)
    }

    ImageStack *-- "1..*" ImageSheet
}

package DataTypes
{
    Class ScalarRef
    {
        identifer: string
    }

    Class VectorRef
    {
        name: string
    }

    class Scalar{}
    class Vector{}

    ScalarRef o-- "0..*" Scalar
    VectorRef o-- "0..*" Vector
}

package FunctionArguments
{
    Class Input
    {

    }
    Class Output
    {

    }
    Input *-- "0..*" Scalar
    Input *-- "0..*" Vector
    Output *-- "0..*" ScalarRef
    Output *-- "0..*" VectorRef
}

package NodeArguments
{
    Class In
    {

    }
    Class Out
    {

    }
    Out *-- "0..*" Scalar
    Out *-- "0..*" Vector
    In *-- "0..*" ScalarRef
    In *-- "0..*" VectorRef
}

package Functions
{
    Class Function
    {
        id: resourceID
        displayname: string
    }

    Function *-- "1" Input
    Function *-- "1" Output

    Class FunctionFromImage3d extends Function
    {
        image3did : resourceID
        valueoffset: double
        valuescale: double
        filter : string
        tilestyleu : string
        tilestylev : string
        tilestylew : string
    }
    FunctionFromImage3d o-- "1" Image3D

    Class FunctionImplicit extends Function
    {
        xmlns: implicit
    }
    FunctionImplicit *-- "0..*" Node_

    Class PrivateExtensionFunction extends Function
    {
        xmlns: XYZ
    }
}

package Native
{
    Class Node_
    {
        xmlns: implicit

        identifier: string
        displayname: string
    }

    Class Add extends Node_
    {
    }

    Class Min extends Node_
    {
    }

    Class MatVecMul extends Node_
    {
    }

    Class FunctionCall extends Node_
    {
    }

    Class DistanceFromMesh extends Node_
    {
        meshid : resourceID
    }
    DistanceFromMesh o-- "1" Mesh

    Node_ *-- "0..1" In
    Node_ *-- "0..1" Out
}

package VolumetricData
{
    Class VolumeData

    Class Boundary
    {
        solidthreshold : double
        functionid : resourceID
    }

    Class Color
    {
        functionid : resourceID
    }

    Class Property
    {
        name : string
        fieldid : resourceID
    }

    Class Composite
    {
        basematerialid : resourceID
    }

    Class MaterialMapping
    {
        functionid : resourceID
    }

    VolumeData *-- "0..1" Boundary
    VolumeData *-- "0..1" Color
    VolumeData *-- "0..*" Property
    VolumeData *-- "0..1" Composite
    Composite *-- "1..*" MaterialMapping

    Boundary o-- "1" Function
    Color o-- "1" Function
    Property o-- "1" Function
    MaterialMapping o-- "1" Function
}

Class Mesh
Mesh *-- VolumeData
@enduml